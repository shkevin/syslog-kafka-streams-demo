/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.kafka.streams.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SyslogMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2812993507771565988L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SyslogMessage\",\"namespace\":\"io.confluent.kafka.streams.schemas\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The time the event occurred, in milliseconds since epoch\"},{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The hostname or IP address of the source of the event\"},{\"name\":\"severity\",\"type\":{\"type\":\"enum\",\"name\":\"Severity\",\"doc\":\"The severity level of the event\",\"symbols\":[\"EMERG\",\"ALERT\",\"CRIT\",\"ERR\",\"WARNING\",\"NOTICE\",\"INFO\",\"DEBUG\"]}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The content of the syslog message\"},{\"name\":\"facility\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The facility code indicating the source of the message\",\"default\":\"unknown\"},{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A unique identifier for the event, if applicable\",\"default\":\"unknown\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SyslogMessage> ENCODER =
      new BinaryMessageEncoder<SyslogMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SyslogMessage> DECODER =
      new BinaryMessageDecoder<SyslogMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SyslogMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SyslogMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SyslogMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SyslogMessage>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SyslogMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SyslogMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SyslogMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SyslogMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The time the event occurred, in milliseconds since epoch */
   private long timestamp;
  /** The hostname or IP address of the source of the event */
   private java.lang.String host;
   private io.confluent.kafka.streams.schemas.Severity severity;
  /** The content of the syslog message */
   private java.lang.String message;
  /** The facility code indicating the source of the message */
   private java.lang.String facility;
  /** A unique identifier for the event, if applicable */
   private java.lang.String eventId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SyslogMessage() {}

  /**
   * All-args constructor.
   * @param timestamp The time the event occurred, in milliseconds since epoch
   * @param host The hostname or IP address of the source of the event
   * @param severity The new value for severity
   * @param message The content of the syslog message
   * @param facility The facility code indicating the source of the message
   * @param eventId A unique identifier for the event, if applicable
   */
  public SyslogMessage(java.lang.Long timestamp, java.lang.String host, io.confluent.kafka.streams.schemas.Severity severity, java.lang.String message, java.lang.String facility, java.lang.String eventId) {
    this.timestamp = timestamp;
    this.host = host;
    this.severity = severity;
    this.message = message;
    this.facility = facility;
    this.eventId = eventId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return host;
    case 2: return severity;
    case 3: return message;
    case 4: return facility;
    case 5: return eventId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: host = value$ != null ? value$.toString() : null; break;
    case 2: severity = (io.confluent.kafka.streams.schemas.Severity)value$; break;
    case 3: message = value$ != null ? value$.toString() : null; break;
    case 4: facility = value$ != null ? value$.toString() : null; break;
    case 5: eventId = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The time the event occurred, in milliseconds since epoch
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * The time the event occurred, in milliseconds since epoch
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'host' field.
   * @return The hostname or IP address of the source of the event
   */
  public java.lang.String getHost() {
    return host;
  }


  /**
   * Sets the value of the 'host' field.
   * The hostname or IP address of the source of the event
   * @param value the value to set.
   */
  public void setHost(java.lang.String value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'severity' field.
   * @return The value of the 'severity' field.
   */
  public io.confluent.kafka.streams.schemas.Severity getSeverity() {
    return severity;
  }


  /**
   * Sets the value of the 'severity' field.
   * @param value the value to set.
   */
  public void setSeverity(io.confluent.kafka.streams.schemas.Severity value) {
    this.severity = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The content of the syslog message
   */
  public java.lang.String getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * The content of the syslog message
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'facility' field.
   * @return The facility code indicating the source of the message
   */
  public java.lang.String getFacility() {
    return facility;
  }


  /**
   * Sets the value of the 'facility' field.
   * The facility code indicating the source of the message
   * @param value the value to set.
   */
  public void setFacility(java.lang.String value) {
    this.facility = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return A unique identifier for the event, if applicable
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * A unique identifier for the event, if applicable
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Creates a new SyslogMessage RecordBuilder.
   * @return A new SyslogMessage RecordBuilder
   */
  public static io.confluent.kafka.streams.schemas.SyslogMessage.Builder newBuilder() {
    return new io.confluent.kafka.streams.schemas.SyslogMessage.Builder();
  }

  /**
   * Creates a new SyslogMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SyslogMessage RecordBuilder
   */
  public static io.confluent.kafka.streams.schemas.SyslogMessage.Builder newBuilder(io.confluent.kafka.streams.schemas.SyslogMessage.Builder other) {
    if (other == null) {
      return new io.confluent.kafka.streams.schemas.SyslogMessage.Builder();
    } else {
      return new io.confluent.kafka.streams.schemas.SyslogMessage.Builder(other);
    }
  }

  /**
   * Creates a new SyslogMessage RecordBuilder by copying an existing SyslogMessage instance.
   * @param other The existing instance to copy.
   * @return A new SyslogMessage RecordBuilder
   */
  public static io.confluent.kafka.streams.schemas.SyslogMessage.Builder newBuilder(io.confluent.kafka.streams.schemas.SyslogMessage other) {
    if (other == null) {
      return new io.confluent.kafka.streams.schemas.SyslogMessage.Builder();
    } else {
      return new io.confluent.kafka.streams.schemas.SyslogMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for SyslogMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SyslogMessage>
    implements org.apache.avro.data.RecordBuilder<SyslogMessage> {

    /** The time the event occurred, in milliseconds since epoch */
    private long timestamp;
    /** The hostname or IP address of the source of the event */
    private java.lang.String host;
    private io.confluent.kafka.streams.schemas.Severity severity;
    /** The content of the syslog message */
    private java.lang.String message;
    /** The facility code indicating the source of the message */
    private java.lang.String facility;
    /** A unique identifier for the event, if applicable */
    private java.lang.String eventId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.kafka.streams.schemas.SyslogMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.severity)) {
        this.severity = data().deepCopy(fields()[2].schema(), other.severity);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.facility)) {
        this.facility = data().deepCopy(fields()[4].schema(), other.facility);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.eventId)) {
        this.eventId = data().deepCopy(fields()[5].schema(), other.eventId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing SyslogMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.kafka.streams.schemas.SyslogMessage other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.severity)) {
        this.severity = data().deepCopy(fields()[2].schema(), other.severity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.facility)) {
        this.facility = data().deepCopy(fields()[4].schema(), other.facility);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.eventId)) {
        this.eventId = data().deepCopy(fields()[5].schema(), other.eventId);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The time the event occurred, in milliseconds since epoch
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * The time the event occurred, in milliseconds since epoch
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The time the event occurred, in milliseconds since epoch
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The time the event occurred, in milliseconds since epoch
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'host' field.
      * The hostname or IP address of the source of the event
      * @return The value.
      */
    public java.lang.String getHost() {
      return host;
    }


    /**
      * Sets the value of the 'host' field.
      * The hostname or IP address of the source of the event
      * @param value The value of 'host'.
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder setHost(java.lang.String value) {
      validate(fields()[1], value);
      this.host = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'host' field has been set.
      * The hostname or IP address of the source of the event
      * @return True if the 'host' field has been set, false otherwise.
      */
    public boolean hasHost() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'host' field.
      * The hostname or IP address of the source of the event
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder clearHost() {
      host = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'severity' field.
      * @return The value.
      */
    public io.confluent.kafka.streams.schemas.Severity getSeverity() {
      return severity;
    }


    /**
      * Sets the value of the 'severity' field.
      * @param value The value of 'severity'.
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder setSeverity(io.confluent.kafka.streams.schemas.Severity value) {
      validate(fields()[2], value);
      this.severity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'severity' field has been set.
      * @return True if the 'severity' field has been set, false otherwise.
      */
    public boolean hasSeverity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'severity' field.
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder clearSeverity() {
      severity = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * The content of the syslog message
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * The content of the syslog message
      * @param value The value of 'message'.
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder setMessage(java.lang.String value) {
      validate(fields()[3], value);
      this.message = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * The content of the syslog message
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'message' field.
      * The content of the syslog message
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder clearMessage() {
      message = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'facility' field.
      * The facility code indicating the source of the message
      * @return The value.
      */
    public java.lang.String getFacility() {
      return facility;
    }


    /**
      * Sets the value of the 'facility' field.
      * The facility code indicating the source of the message
      * @param value The value of 'facility'.
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder setFacility(java.lang.String value) {
      validate(fields()[4], value);
      this.facility = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'facility' field has been set.
      * The facility code indicating the source of the message
      * @return True if the 'facility' field has been set, false otherwise.
      */
    public boolean hasFacility() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'facility' field.
      * The facility code indicating the source of the message
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder clearFacility() {
      facility = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * A unique identifier for the event, if applicable
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * A unique identifier for the event, if applicable
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder setEventId(java.lang.String value) {
      validate(fields()[5], value);
      this.eventId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * A unique identifier for the event, if applicable
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'eventId' field.
      * A unique identifier for the event, if applicable
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SyslogMessage.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SyslogMessage build() {
      try {
        SyslogMessage record = new SyslogMessage();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.host = fieldSetFlags()[1] ? this.host : (java.lang.String) defaultValue(fields()[1]);
        record.severity = fieldSetFlags()[2] ? this.severity : (io.confluent.kafka.streams.schemas.Severity) defaultValue(fields()[2]);
        record.message = fieldSetFlags()[3] ? this.message : (java.lang.String) defaultValue(fields()[3]);
        record.facility = fieldSetFlags()[4] ? this.facility : (java.lang.String) defaultValue(fields()[4]);
        record.eventId = fieldSetFlags()[5] ? this.eventId : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SyslogMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<SyslogMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SyslogMessage>
    READER$ = (org.apache.avro.io.DatumReader<SyslogMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timestamp);

    out.writeString(this.host);

    out.writeEnum(this.severity.ordinal());

    out.writeString(this.message);

    out.writeString(this.facility);

    out.writeString(this.eventId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timestamp = in.readLong();

      this.host = in.readString();

      this.severity = io.confluent.kafka.streams.schemas.Severity.values()[in.readEnum()];

      this.message = in.readString();

      this.facility = in.readString();

      this.eventId = in.readString();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timestamp = in.readLong();
          break;

        case 1:
          this.host = in.readString();
          break;

        case 2:
          this.severity = io.confluent.kafka.streams.schemas.Severity.values()[in.readEnum()];
          break;

        case 3:
          this.message = in.readString();
          break;

        case 4:
          this.facility = in.readString();
          break;

        case 5:
          this.eventId = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










