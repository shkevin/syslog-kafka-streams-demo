/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.kafka.streams.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SeverityCount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6943947196925374213L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SeverityCount\",\"namespace\":\"io.confluent.kafka.streams.schemas\",\"fields\":[{\"name\":\"low\",\"type\":\"long\",\"doc\":\"Count of low severity messages\"},{\"name\":\"medium\",\"type\":\"long\",\"doc\":\"Count of medium severity messages\"},{\"name\":\"high\",\"type\":\"long\",\"doc\":\"Count of high severity messages\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SeverityCount> ENCODER =
      new BinaryMessageEncoder<SeverityCount>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SeverityCount> DECODER =
      new BinaryMessageDecoder<SeverityCount>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SeverityCount> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SeverityCount> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SeverityCount> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SeverityCount>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SeverityCount to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SeverityCount from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SeverityCount instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SeverityCount fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Count of low severity messages */
   private long low;
  /** Count of medium severity messages */
   private long medium;
  /** Count of high severity messages */
   private long high;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SeverityCount() {}

  /**
   * All-args constructor.
   * @param low Count of low severity messages
   * @param medium Count of medium severity messages
   * @param high Count of high severity messages
   */
  public SeverityCount(java.lang.Long low, java.lang.Long medium, java.lang.Long high) {
    this.low = low;
    this.medium = medium;
    this.high = high;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return low;
    case 1: return medium;
    case 2: return high;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: low = (java.lang.Long)value$; break;
    case 1: medium = (java.lang.Long)value$; break;
    case 2: high = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'low' field.
   * @return Count of low severity messages
   */
  public long getLow() {
    return low;
  }


  /**
   * Sets the value of the 'low' field.
   * Count of low severity messages
   * @param value the value to set.
   */
  public void setLow(long value) {
    this.low = value;
  }

  /**
   * Gets the value of the 'medium' field.
   * @return Count of medium severity messages
   */
  public long getMedium() {
    return medium;
  }


  /**
   * Sets the value of the 'medium' field.
   * Count of medium severity messages
   * @param value the value to set.
   */
  public void setMedium(long value) {
    this.medium = value;
  }

  /**
   * Gets the value of the 'high' field.
   * @return Count of high severity messages
   */
  public long getHigh() {
    return high;
  }


  /**
   * Sets the value of the 'high' field.
   * Count of high severity messages
   * @param value the value to set.
   */
  public void setHigh(long value) {
    this.high = value;
  }

  /**
   * Creates a new SeverityCount RecordBuilder.
   * @return A new SeverityCount RecordBuilder
   */
  public static io.confluent.kafka.streams.schemas.SeverityCount.Builder newBuilder() {
    return new io.confluent.kafka.streams.schemas.SeverityCount.Builder();
  }

  /**
   * Creates a new SeverityCount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SeverityCount RecordBuilder
   */
  public static io.confluent.kafka.streams.schemas.SeverityCount.Builder newBuilder(io.confluent.kafka.streams.schemas.SeverityCount.Builder other) {
    if (other == null) {
      return new io.confluent.kafka.streams.schemas.SeverityCount.Builder();
    } else {
      return new io.confluent.kafka.streams.schemas.SeverityCount.Builder(other);
    }
  }

  /**
   * Creates a new SeverityCount RecordBuilder by copying an existing SeverityCount instance.
   * @param other The existing instance to copy.
   * @return A new SeverityCount RecordBuilder
   */
  public static io.confluent.kafka.streams.schemas.SeverityCount.Builder newBuilder(io.confluent.kafka.streams.schemas.SeverityCount other) {
    if (other == null) {
      return new io.confluent.kafka.streams.schemas.SeverityCount.Builder();
    } else {
      return new io.confluent.kafka.streams.schemas.SeverityCount.Builder(other);
    }
  }

  /**
   * RecordBuilder for SeverityCount instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SeverityCount>
    implements org.apache.avro.data.RecordBuilder<SeverityCount> {

    /** Count of low severity messages */
    private long low;
    /** Count of medium severity messages */
    private long medium;
    /** Count of high severity messages */
    private long high;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.kafka.streams.schemas.SeverityCount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.low)) {
        this.low = data().deepCopy(fields()[0].schema(), other.low);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.medium)) {
        this.medium = data().deepCopy(fields()[1].schema(), other.medium);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.high)) {
        this.high = data().deepCopy(fields()[2].schema(), other.high);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing SeverityCount instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.kafka.streams.schemas.SeverityCount other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.low)) {
        this.low = data().deepCopy(fields()[0].schema(), other.low);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.medium)) {
        this.medium = data().deepCopy(fields()[1].schema(), other.medium);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.high)) {
        this.high = data().deepCopy(fields()[2].schema(), other.high);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'low' field.
      * Count of low severity messages
      * @return The value.
      */
    public long getLow() {
      return low;
    }


    /**
      * Sets the value of the 'low' field.
      * Count of low severity messages
      * @param value The value of 'low'.
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SeverityCount.Builder setLow(long value) {
      validate(fields()[0], value);
      this.low = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'low' field has been set.
      * Count of low severity messages
      * @return True if the 'low' field has been set, false otherwise.
      */
    public boolean hasLow() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'low' field.
      * Count of low severity messages
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SeverityCount.Builder clearLow() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'medium' field.
      * Count of medium severity messages
      * @return The value.
      */
    public long getMedium() {
      return medium;
    }


    /**
      * Sets the value of the 'medium' field.
      * Count of medium severity messages
      * @param value The value of 'medium'.
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SeverityCount.Builder setMedium(long value) {
      validate(fields()[1], value);
      this.medium = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'medium' field has been set.
      * Count of medium severity messages
      * @return True if the 'medium' field has been set, false otherwise.
      */
    public boolean hasMedium() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'medium' field.
      * Count of medium severity messages
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SeverityCount.Builder clearMedium() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'high' field.
      * Count of high severity messages
      * @return The value.
      */
    public long getHigh() {
      return high;
    }


    /**
      * Sets the value of the 'high' field.
      * Count of high severity messages
      * @param value The value of 'high'.
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SeverityCount.Builder setHigh(long value) {
      validate(fields()[2], value);
      this.high = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'high' field has been set.
      * Count of high severity messages
      * @return True if the 'high' field has been set, false otherwise.
      */
    public boolean hasHigh() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'high' field.
      * Count of high severity messages
      * @return This builder.
      */
    public io.confluent.kafka.streams.schemas.SeverityCount.Builder clearHigh() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SeverityCount build() {
      try {
        SeverityCount record = new SeverityCount();
        record.low = fieldSetFlags()[0] ? this.low : (java.lang.Long) defaultValue(fields()[0]);
        record.medium = fieldSetFlags()[1] ? this.medium : (java.lang.Long) defaultValue(fields()[1]);
        record.high = fieldSetFlags()[2] ? this.high : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SeverityCount>
    WRITER$ = (org.apache.avro.io.DatumWriter<SeverityCount>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SeverityCount>
    READER$ = (org.apache.avro.io.DatumReader<SeverityCount>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.low);

    out.writeLong(this.medium);

    out.writeLong(this.high);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.low = in.readLong();

      this.medium = in.readLong();

      this.high = in.readLong();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.low = in.readLong();
          break;

        case 1:
          this.medium = in.readLong();
          break;

        case 2:
          this.high = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










